Эту библиотеку нужно скачать и установить, чтобы компилятор мог с ней работать. Библиотека называется bcm2835-1.17.
 Последние цифры в названии библиотеки, обозначают её версию. А так, как библиотека постоянно обновляется автором,
 то версии будут меняться. на сегодняшний день доступна версия 1.17. Узнать о номере последней версии можно по адресу:
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 www.open.com.au/mikem/bcm2835/index.html
По этой же ссылке вы можете ознакомиться со всеми функциями, которые присутствуют в этой библиотеке. 
Мы же пока установим версию 1.49. Запускаем окно терминала и вводим
туда команду:
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
wget www.open.com.au/mikem/bcm2835/bcm2835-1.49.tar.gz                      1.49 пока текущая версия
Библиотека быстренько скачивается. Чтобы её установить, нужно сначала её разархивировать. Это делается следующей 
командой:
tar zxvf bcm2835-1.49.tar.gz
Теперь перейдём в директорию, куда эта библиотека развернулась:
cd bcm2835-1.49  
Ну и инсталлируем её: 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
./configure make
sudo make check
sudo make install

для компиляции  наших файлов
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
gcc -o test test.c -lrt -lbcm2835 

 -l (латинская л маленькая) bcm2835 говорит компилятору о том, что все неизвестные ему функции в нашей программе,
 он может найти в установленной библиотеке  bcm2835
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

sudo ./test   - Если ошибок не обнаружено, запускаем программу: 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ПОРТЫ! ВАЖНО!
RPI_BPLUS_GPIO_J8_*        вроде как b+
RPI_V2_GPIO_P1_*           версия расбери 2 B
RPI_GPIO_P1_*		   вроде как A
!!!!!!!!!!!!!!!!!!!!!!!!
#include <bcm2835.h> -эта строка говорит компилятору, что в программе используется заголовочный файл  bcm2835.h. В этом файле находятся все описания функций и идентификаторы портов GPIO.

>#define PIN RPI_GPIO_P1_03 — здесь мы говорим компилятору, что везде в программе, где он увидит идентификатор PIN, ему нужно выполнить замену его на идентификатор  RPI_GPIO_P1_03. Это сделано для того, чтобы мы могли при желании быстро изменить номер подключаемого порта. Для этого достаточно изменить только эту строку, а не выискивать по всей программе, где мы этот идентификатор использовали. 

int main() это начало нашей программы, обозначение главной функции в Си.

if (!bcm2835_init())  - эта часть пытается инициализировать GPIO и если это не получилось,
  return 1;             то аварийно завершает программу и передаёт на выходе код 1.</

bcm2835_gpio_fsel(PIN, BCM2835_GPIO_FSEL_OUTP); — Эта функция устанавливает для нашего порта Р1_03 режим на вывод. Т.е. говорит процессору, что этот порт будет использован для управления внешним устройством. <

bcm2835_gpio_write(PIN, LOW); — устанавливаем порт Р1_03 в низкое состояние, т.е. процессор его подключает к 0. После этого светодиод загорается. 

bcm2835_delay(1000); — Эта функция просто ждёт 1000 милисекунд, или ровно 1 секунду. Всё это время у нас горит светодиод. 

bcm2835_gpio_write(PIN, HIGH); —  устанавливаем порт Р1_03 в высокое состояние, т.е. процессор его подключает к +3,3в. При этом светодиод гаснет. 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
при возгорания лампочки для rPI2 B у которого 11 порт слева (по рисунку):
#include <bcm2835.h>
// Blinks on RPi Plug P1 pin 11 (which is GPIO pin 17)
#define PIN RPI_V2_GPIO_P1_11
int main(int argc, char **argv)
{
    // If you call this, it will not actually access the GPIO
    // Use for testing
//    bcm2835_set_debug(1);
    if (!bcm2835_init())
        return 1;
    // Set the pin to be an output
    bcm2835_gpio_fsel(PIN, BCM2835_GPIO_FSEL_OUTP);
    // Blink
    while (1)
    {
        // Turn it on
        bcm2835_gpio_write(PIN, HIGH);
        
        // wait a bit
        bcm2835_delay(500);
        
        // turn it off
        bcm2835_gpio_write(PIN, LOW);
        
        // wait a bit
        bcm2835_delay(500);
    }
    bcm2835_close();
    return 0;
}
